{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "emitter-text-header-layout",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getNotificationTime } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\nif (Context.item.pending) {\n  const translation = getTranslation('mainSim-interface', 'msg-now');\n  return translation;\n}\ngetNotificationTime(Context.item.timeStamp);",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "className" : "emitter-text-body-layout",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\n  if (!Context.item.pending || Context.item.pending && Context.item.recipientId === Context.interfaceState.state.currentActorUid) {\n    return `<p>${Context.item.message.replace(/\\n/g, '<br/>')}</p>`;\n    }\n  getTranslation('mainSim-interface', 'incoming-message');",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            } ],
            "conditionnalClassNames" : [ {
              "applyOn" : "Outside",
              "className" : "radio-message-others tri-right left-top",
              "condition" : {
                "@class" : "Script",
                "content" : "import { getTypedInterfaceState } from \"./gameInterface/interfaceState\";\nContext.item.recipientId !== getTypedInterfaceState().currentActorUid;",
                "language" : "typescript"
              }
            }, {
              "applyOn" : "Outside",
              "className" : "radio-message-myself tri-right right-top",
              "condition" : {
                "@class" : "Script",
                "content" : "import { getTypedInterfaceState } from \"./gameInterface/interfaceState\";\nContext.item.recipientId === getTypedInterfaceState().currentActorUid;",
                "language" : "typescript"
              }
            }, {
              "applyOn" : "Inside",
              "className" : "radio-message-last",
              "condition" : {
                "@class" : "Script",
                "content" : "import { getSelectedChannel, isLastRadioMessageForChannel } from \"./UIfacade/radioFacade\";\nisLastRadioMessageForChannel(getSelectedChannel(), Context.item.uid);",
                "language" : "typescript"
              }
            }, {
              "applyOn" : "Outside",
              "className" : "pending",
              "condition" : {
                "@class" : "Script",
                "content" : "Context.item.pending;",
                "language" : "typescript"
              }
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { getSelectedChannel } from \"./UIfacade/radioFacade\";\nContext.item.channel !== getSelectedChannel();",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "messageArea",
        "exposeAs" : "item",
        "getItemsFn" : {
          "@class" : "Script",
          "content" : "import { getAllRadioMessages, getOngoingRadioMessagesOnChannelAsRadioMessages, getSelectedChannel } from \"./UIfacade/radioFacade\";\ngetAllRadioMessages().concat(getOngoingRadioMessagesOnChannelAsRadioMessages(getSelectedChannel()));",
          "language" : "TypeScript"
        },
        "itemKey" : "uid",
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "messageArea-container",
        "layoutStyle" : { },
        "name" : "output message",
        "style" : { }
      },
      "type" : "For each"
    } ],
    "className" : "noPadding",
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : "noPadding",
    "layoutStyle" : {
      "height" : "100%",
      "overflow" : "auto",
      "width" : "100%"
    },
    "style" : { }
  },
  "type" : "FlexList"
}