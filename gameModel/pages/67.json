{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "className" : "rectangleButton",
            "id" : "",
            "label" : {
              "@class" : "Script",
              "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks','assign-task');",
              "language" : "TypeScript"
            },
            "layoutClassName" : "rectangleButton-container",
            "layoutStyle" : { },
            "localScriptEval" : {
              "script" : {
                "@class" : "ClientScript",
                "content" : "import { ResourcesManagementActivityType } from \"./gameInterface/interfaceState\";\n\n const newState = Helpers.cloneDeep(Context.interfaceState.state);\n newState.resourcesManagement.activityType = ResourcesManagementActivityType.assignTask\n Context.interfaceState.setState(newState);",
                "language" : "TypeScript"
              }
            },
            "name" : "assignTask",
            "style" : { }
          },
          "type" : "Button"
        }, {
          "props" : {
            "className" : "rectangleButton",
            "id" : "",
            "label" : {
              "@class" : "Script",
              "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks','request-reports');",
              "language" : "TypeScript"
            },
            "layoutClassName" : "rectangleButton-container",
            "layoutStyle" : { },
            "localScriptEval" : {
              "script" : {
                "@class" : "ClientScript",
                "content" : "import { ResourcesManagementActivityType } from \"./gameInterface/interfaceState\";\n\nconst newState = Helpers.cloneDeep(Context.interfaceState.state);\nnewState.resourcesManagement.activityType = ResourcesManagementActivityType.requestReport;\nContext.interfaceState.setState(newState);",
                "language" : "TypeScript"
              }
            },
            "name" : "requestReport",
            "style" : { }
          },
          "type" : "Button"
        } ],
        "className" : "noPadding noMargin",
        "layout" : { },
        "layoutClassName" : "noPadding noMargin",
        "layoutStyle" : {
          "maxWidth" : "25vw"
        },
        "name" : "tasksButtons",
        "style" : { }
      },
      "type" : "FlexList"
    }, {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ ],
            "className" : "noPadding",
            "layout" : {
              "alignItems" : "flex-start",
              "flexDirection" : "column"
            },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : {
              "maxWidth" : "25vw"
            },
            "name" : "buttons",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "mimms_h3title",
                "layoutClassName" : "",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-locations', 'sourceLocation')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\nimport { getAvailableLocationsFacade } from \"./UIfacade/locationFacade\";\n\ngetAvailableLocationsFacade().map((location) => {return {label: getTranslation('mainSim-locations', location.name), value: location.id}});",
                  "language" : "typescript"
                },
                "layoutClassName" : "resourcesDropdowns",
                "layoutStyle" : { },
                "name" : "source location",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { updateCurrentLocation } from \"./UIfacade/resourceFacade\";\n\nupdateCurrentLocation(Context.resourceAllocationCurrentLocation);\n",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"resourceAllocationCurrentLocation\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "import { getAllocateResourcesCurrentLocation } from \"./UIfacade/resourceFacade\";\ngetAllocateResourcesCurrentLocation() ||Â '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "className" : "",
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { SelectedPanel } from \"./gameInterface/selectedPanel\";\nContext.interfaceState.state.selectedPanel !== SelectedPanel.radios;",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutClassName" : "",
            "layoutStyle" : { },
            "name" : "current location",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "mimms_h3title",
                "layoutClassName" : "mimms_h3title",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks', 'currentActivity')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { SelectedPanel } from \"./gameInterface/selectedPanel\";\nimport { getAllocateResourcesCurrentLocation } from \"./UIfacade/resourceFacade\";\nimport { getSourceTaskChoices } from \"./UIfacade/taskFacade\";\n    const isRadio = Context.interfaceState.state.selectedPanel === SelectedPanel.radios;\n\tgetSourceTaskChoices(Context.interfaceState.state.currentActorUid, getAllocateResourcesCurrentLocation(), isRadio);",
                  "language" : "typescript"
                },
                "disableIf" : {
                  "@class" : "Script",
                  "content" : "import { SelectedPanel } from \"./gameInterface/selectedPanel\";\nimport { getAllocateResourcesCurrentLocation } from \"./UIfacade/resourceFacade\";\nimport { getSourceTaskChoicesCount } from \"./UIfacade/taskFacade\";\n  const isRadio = Context.interfaceState.state.selectedPanel === SelectedPanel.radios;\n  getSourceTaskChoicesCount(Context.interfaceState.state.currentActorUid, getAllocateResourcesCurrentLocation(), isRadio) < 2;",
                  "language" : "typescript"
                },
                "layoutClassName" : "resourcesDropdowns",
                "layoutStyle" : { },
                "name" : "source task",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { updateResourceValues } from \"./UIfacade/resourceFacade\";\nupdateResourceValues('currentTaskId', Context.resourceAllocationCurrentTaskId);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"resourceAllocationCurrentTaskId\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "import { getStateKeyForResource } from \"./UIfacade/resourceFacade\";\nconst key = getStateKeyForResource();\nContext.interfaceState.state.resources[key].currentTaskId || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "className" : "",
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "current activity",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "mimms_h3title",
                "layoutClassName" : "mimms_h3title",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-resources', 'resources')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "children" : [ {
                  "props" : {
                    "children" : [ {
                      "props" : {
                        "className" : "noPadding noMargin",
                        "conditionnalClassNames" : [ {
                          "applyOn" : "Inside",
                          "className" : "presentResources",
                          "condition" : {
                            "@class" : "Script",
                            "content" : "import { ResourceType } from \"./game/common/resources/resourceType\";\nimport { LOCATION_ENUM } from \"./game/common/simulationState/locationState\";\nimport { countAvailableResourcesToAllocate, getAllocateResourcesCurrentLocation, getStateKeyForResource } from \"./UIfacade/resourceFacade\";\n\nconst key = getStateKeyForResource();\nconst location : LOCATION_ENUM = getAllocateResourcesCurrentLocation();\nconst taskId = +Context.interfaceState.state.resources[key].currentTaskId;\nconst resourceType: ResourceType = Context.resourceType.enum;\nparseInt(countAvailableResourcesToAllocate(location, taskId, resourceType)) > 0",
                            "language" : "typescript"
                          }
                        } ],
                        "layoutClassName" : "noPadding noMargin",
                        "layoutStyle" : { },
                        "name" : "resource type name",
                        "style" : {
                          "alignContent" : "center",
                          "fontSize" : "12px"
                        },
                        "text" : {
                          "@class" : "Script",
                          "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-resources', '' + Context.resourceType.enum);",
                          "language" : "TypeScript"
                        }
                      },
                      "type" : "Text"
                    }, {
                      "props" : {
                        "children" : [ {
                          "props" : {
                            "className" : "noPadding noMargin",
                            "layoutClassName" : "resourceTypeChosenNumber-container noPadding noMargin",
                            "layoutStyle" : { },
                            "onCancel" : { },
                            "onVariableChange" : {
                              "client" : {
                                "@class" : "Script",
                                "content" : "import { updateResourceTypesValues } from \"./UIfacade/resourceFacade\";\n\nupdateResourceTypesValues();",
                                "language" : "TypeScript"
                              },
                              "exposeVariableAs" : {
                                "@class" : "Script",
                                "content" : "\"resourceAllocationNbForType\"",
                                "language" : "TypeScript"
                              }
                            },
                            "placeholder" : {
                              "@class" : "Script",
                              "content" : "\"0\"",
                              "language" : "TypeScript"
                            },
                            "script" : {
                              "@class" : "Script",
                              "content" : "import { getStateKeyForResource } from \"./UIfacade/resourceFacade\";\n  const key = getStateKeyForResource();\nContext.interfaceState.state.resources[key][Context.resourceType.enum] || '';",
                              "language" : "TypeScript"
                            },
                            "style" : {
                              "fontSize" : "10px",
                              "height" : "10px",
                              "lineHeight" : "10px"
                            }
                          },
                          "type" : "Number input"
                        }, {
                          "props" : {
                            "className" : "",
                            "conditionnalClassNames" : [ {
                              "applyOn" : "Outside",
                              "className" : "presentResources",
                              "condition" : {
                                "@class" : "Script",
                                "content" : "import { ResourceType } from \"./game/common/resources/resourceType\";\nimport { LOCATION_ENUM } from \"./game/common/simulationState/locationState\";\nimport { countAvailableResourcesToAllocate, getAllocateResourcesCurrentLocation, getStateKeyForResource } from \"./UIfacade/resourceFacade\";\n\nconst key = getStateKeyForResource();\nconst location : LOCATION_ENUM = getAllocateResourcesCurrentLocation();\nconst taskId = +Context.interfaceState.state.resources[key].currentTaskId;\nconst resourceType: ResourceType = Context.resourceType.enum;\nparseInt(countAvailableResourcesToAllocate(location, taskId, resourceType)) > 0",
                                "language" : "typescript"
                              }
                            } ],
                            "layoutClassName" : "selectableRessources ",
                            "layoutStyle" : {
                              "paddingTop" : "0px"
                            },
                            "name" : "availableResourcesByType",
                            "style" : {
                              "alignItems" : "center",
                              "fontSize" : "12px"
                            },
                            "text" : {
                              "@class" : "Script",
                              "content" : "import { ResourceType } from \"./game/common/resources/resourceType\";\nimport { LOCATION_ENUM } from \"./game/common/simulationState/locationState\";\nimport { countAvailableResourcesToAllocate, getAllocateResourcesCurrentLocation, getStateKeyForResource } from \"./UIfacade/resourceFacade\";\nconst key = getStateKeyForResource();\nconst location : LOCATION_ENUM = getAllocateResourcesCurrentLocation();\nconst taskId = +Context.interfaceState.state.resources[key].currentTaskId;\nconst resourceType: ResourceType = Context.resourceType.enum;\n'/ ' + countAvailableResourcesToAllocate(location, taskId, resourceType);",
                              "language" : "TypeScript"
                            }
                          },
                          "type" : "Text"
                        } ],
                        "className" : "noPadding noMargin",
                        "layout" : {
                          "alignContent" : "center",
                          "justifyContent" : "space-between"
                        },
                        "layoutClassName" : "noPadding noMargin",
                        "layoutStyle" : { },
                        "name" : "numbers",
                        "style" : {
                          "height" : "2rem",
                          "width" : "4rem"
                        }
                      },
                      "type" : "FlexList"
                    } ],
                    "className" : "",
                    "layout" : {
                      "alignContent" : "center",
                      "justifyContent" : "space-between"
                    },
                    "layoutClassName" : "evenOddList-container",
                    "layoutStyle" : {
                      "height" : "30px"
                    },
                    "name" : "resources",
                    "style" : { }
                  },
                  "type" : "FlexList"
                } ],
                "className" : "",
                "exposeAs" : "resourceType",
                "getItemsFn" : {
                  "@class" : "Script",
                  "content" : "import { getHumanResourceTypes } from \"./UIfacade/resourceFacade\";\ngetHumanResourceTypes().map(type => {return {enum: type}});",
                  "language" : "TypeScript"
                },
                "itemKey" : "enum",
                "layout" : {
                  "flexDirection" : "column"
                },
                "layoutClassName" : "noPadding",
                "layoutStyle" : {
                  "marginTop" : "0px"
                },
                "style" : { }
              },
              "type" : "For each"
            } ],
            "className" : "",
            "layout" : {
              "alignContent" : "center",
              "flexDirection" : "column"
            },
            "layoutClassName" : "",
            "layoutStyle" : { },
            "name" : "resources type",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "layoutClassName" : "mimms_h3title",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\"\ngetTranslation('mainSim-locations', 'targetLocation')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\nimport { getAvailableLocationsFacade } from \"./UIfacade/locationFacade\";\ngetAvailableLocationsFacade().map((location) => {return {label: getTranslation('mainSim-locations', location.name), value: location.id}});",
                  "language" : "typescript"
                },
                "layoutClassName" : "resourcesDropdowns",
                "layoutStyle" : { },
                "name" : "target location",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { updateTargetDestination } from \"./UIfacade/resourceFacade\";\n\nupdateTargetDestination(Context.resourceAllocationTargetLocation);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"resourceAllocationTargetLocation\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "import { getStateKeyForResource } from \"./UIfacade/resourceFacade\";\nconst key = getStateKeyForResource();\nContext.interfaceState.state.resources[key].targetLocation || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "className" : "",
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "target location",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "layoutClassName" : "mimms_h3title",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks', 'targetActivity')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getStateKeyForResource } from \"./UIfacade/resourceFacade\";\nimport { getTargetTaskChoices } from \"./UIfacade/taskFacade\";\n  const key = getStateKeyForResource();\ngetTargetTaskChoices(Context.interfaceState.state.currentActorUid, Context.interfaceState.state.resources[key].targetLocation);",
                  "language" : "typescript"
                },
                "layoutClassName" : "resourcesDropdowns",
                "layoutStyle" : { },
                "name" : "destination task",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { updateResourceValues } from \"./UIfacade/resourceFacade\";\nupdateResourceValues('targetTaskId', Context.resourceAllocationTargetTaskId);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"resourceAllocationTargetTaskId\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "import { getStateKeyForResource } from \"./UIfacade/resourceFacade\";\nconst key = getStateKeyForResource();\nContext.interfaceState.state.resources[key].targetTaskId || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "className" : "",
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "target activity",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "button-S button-secondaryColor",
                "conditionnalClassNames" : [ {
                  "applyOn" : "Inside",
                  "className" : "abort",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "import { isOrderValidationDisabled } from \"./UIfacade/resourceFacade\";\n  isOrderValidationDisabled();",
                    "language" : "typescript"
                  }
                } ],
                "disableIf" : {
                  "@class" : "Script",
                  "content" : "import { isOrderValidationDisabled } from \"./UIfacade/resourceFacade\";\n  isOrderValidationDisabled();",
                  "language" : "typescript"
                },
                "hideIf" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nif (canPlanAction()) return false;\n!isPlannedAction( getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ALLOCATE_RESOURCES)[0]?.Uid);",
                  "language" : "typescript"
                },
                "label" : {
                  "@class" : "Script",
                  "content" : "import { canPlanAction } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\ncanPlanAction() ? getTranslation('mainSim-interface', 'send') : getTranslation('mainSim-interface', 'cancel');",
                  "language" : "TypeScript"
                },
                "layoutClassName" : "",
                "layoutStyle" : { },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { runActionButton } from \"./gameInterface/actionsButtonLogic\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\n\nconst actions =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ALLOCATE_RESOURCES);\n\nrunActionButton(actions[0]);",
                    "language" : "TypeScript"
                  }
                },
                "style" : { }
              },
              "type" : "Button"
            } ],
            "className" : "",
            "layout" : {
              "justifyContent" : "flex-end"
            },
            "layoutStyle" : { },
            "name" : "button",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "noPadding noMargin",
        "disableIf" : {
          "@class" : "Script",
          "content" : "import { canPlanAction } from \"./gameInterface/main\";\nif (canPlanAction()) {\n    return false;\n  }\ntrue;",
          "language" : "typescript"
        },
        "hideIf" : {
          "@class" : "Script",
          "content" : "import { ResourcesManagementActivityType } from \"./gameInterface/interfaceState\";\nContext.interfaceState.state.resourcesManagement.activityType !== ResourcesManagementActivityType.assignTask;",
          "language" : "typescript"
        },
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "noPadding noMargin",
        "layoutStyle" : {
          "width" : "100%"
        },
        "name" : "assignTasksInputs",
        "style" : { }
      },
      "type" : "FlexList"
    }, {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "mimms_h3title",
                "layoutClassName" : "",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-locations', 'sourceLocation')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { PreTriageTask } from \"./game/common/tasks/taskBasePretriage\";\nimport { getTranslation } from \"./tools/translation\";\nimport { getLocationsByTaskClassFacade } from \"./UIfacade/taskFacade\";\n\ngetLocationsByTaskClassFacade(PreTriageTask).map((location) => {return {label: getTranslation('mainSim-locations', location.name), value: location.id}});",
                  "language" : "typescript"
                },
                "layoutClassName" : "resourcesDropdowns",
                "layoutStyle" : { },
                "name" : "source location",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "\n const newState = Helpers.cloneDeep(Context.interfaceState.state);\n newState.resourcesManagement.pretriageReportRequestLocation = Context.pretriageReportRequestLocation;\n Context.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"pretriageReportRequestLocation\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.resourcesManagement.pretriageReportRequestLocation || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "className" : "",
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { SelectedPanel } from \"./gameInterface/selectedPanel\";\nContext.interfaceState.state.selectedPanel !== SelectedPanel.radios;",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutClassName" : "",
            "layoutStyle" : { },
            "name" : "pretriage report",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "button-S button-secondaryColor",
                "conditionnalClassNames" : [ {
                  "applyOn" : "Inside",
                  "className" : "abort",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "import { isPretriageReportRequestDisabled } from \"./UIfacade/resourceFacade\";\n  isPretriageReportRequestDisabled();",
                    "language" : "typescript"
                  }
                } ],
                "disableIf" : {
                  "@class" : "Script",
                  "content" : "import { isPretriageReportRequestDisabled } from \"./UIfacade/resourceFacade\";\n  isPretriageReportRequestDisabled();",
                  "language" : "typescript"
                },
                "hideIf" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nif (canPlanAction()) return false;\n!isPlannedAction( getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.PRETRIAGE_REPORT)[0]?.Uid);",
                  "language" : "typescript"
                },
                "label" : {
                  "@class" : "Script",
                  "content" : "import { canPlanAction } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\ncanPlanAction() ? getTranslation('mainSim-interface', 'send') : getTranslation('mainSim-interface', 'cancel');",
                  "language" : "TypeScript"
                },
                "layoutClassName" : "",
                "layoutStyle" : { },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { runActionButton } from \"./gameInterface/actionsButtonLogic\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\n\nconst actions =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.PRETRIAGE_REPORT);\n\nrunActionButton(actions[0]);",
                    "language" : "TypeScript"
                  }
                },
                "style" : { }
              },
              "type" : "Button"
            } ],
            "className" : "",
            "layout" : {
              "justifyContent" : "flex-end"
            },
            "layoutStyle" : { },
            "name" : "button",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "noPadding noMargin",
        "hideIf" : {
          "@class" : "Script",
          "content" : "import { ResourcesManagementActivityType } from \"./gameInterface/interfaceState\";\nContext.interfaceState.state.resourcesManagement.activityType !== ResourcesManagementActivityType.requestReport;",
          "language" : "typescript"
        },
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "noPadding noMargin",
        "layoutStyle" : {
          "width" : "100%"
        },
        "name" : "requestReportInputs",
        "style" : { }
      },
      "type" : "FlexList"
    } ],
    "className" : "noPadding noMargin",
    "conditionnalClassNames" : [ {
      "applyOn" : "Inside",
      "className" : "unauthorizedAction",
      "condition" : {
        "@class" : "Script",
        "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nif (canPlanAction())return false;\n!isPlannedAction(getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ALLOCATE_RESOURCES)[0]?.Uid);",
        "language" : "typescript"
      }
    } ],
    "disableIf" : {
      "@class" : "Script",
      "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nif (canPlanAction()) return false;\n!isPlannedAction(getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ALLOCATE_RESOURCES)[0]?.Uid);",
      "language" : "typescript"
    },
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : "noPadding noMargin",
    "layoutStyle" : {
      "width" : "100%"
    },
    "name" : "resources",
    "style" : {
      "overflow" : "auto"
    }
  },
  "type" : "FlexList"
}