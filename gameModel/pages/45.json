{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "children" : [ {
                  "props" : {
                    "className" : "actionName",
                    "layoutStyle" : { },
                    "name" : "actionName",
                    "style" : { },
                    "text" : {
                      "@class" : "Script",
                      "content" : "import { ActionTemplateBase } from \"./game/common/actions/actionTemplateBase\";\nconst actionTpl = Context.action as ActionTemplateBase;\nactionTpl.getTitle();",
                      "language" : "TypeScript"
                    }
                  },
                  "type" : "Text"
                }, {
                  "props" : {
                    "children" : [ {
                      "props" : {
                        "layoutStyle" : { },
                        "name" : "taskDuration",
                        "style" : { },
                        "text" : {
                          "@class" : "Script",
                          "content" : "`${Context.action.duration / 60}`;",
                          "language" : "TypeScript"
                        }
                      },
                      "type" : "Text"
                    }, {
                      "props" : {
                        "layoutStyle" : { },
                        "name" : "minutes",
                        "style" : { },
                        "text" : {
                          "@class" : "Script",
                          "content" : "\"minutes\"",
                          "language" : "TypeScript"
                        }
                      },
                      "type" : "Text"
                    } ],
                    "layout" : { },
                    "layoutClassName" : "noPadding noMargin",
                    "layoutStyle" : { },
                    "name" : "duration",
                    "style" : { }
                  },
                  "type" : "FlexList"
                } ],
                "className" : "actionHeader",
                "conditionnalClassNames" : [ {
                  "applyOn" : "Inside",
                  "className" : "actionHeaderActive",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "Variable.find(gameModel, 'currentActionUid').getValue(self) === Context.action.Uid;",
                    "language" : "typescript"
                  }
                } ],
                "impactVariable" : {
                  "impact" : {
                    "@class" : "Script",
                    "content" : "Variable.find(gameModel, 'currentActionUid').setValue(self, Context.action.Uid);\n",
                    "language" : "javascript"
                  }
                },
                "layout" : {
                  "flexDirection" : "row",
                  "justifyContent" : "space-between"
                },
                "layoutClassName" : "noPadding",
                "layoutStyle" : { },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : "import { endMapAction } from \"./gameMap/main\";\n\nendMapAction();",
                    "language" : "TypeScript"
                  }
                },
                "name" : "Title",
                "style" : { }
              },
              "type" : "FlexList"
            }, {
              "props" : {
                "children" : [ {
                  "props" : {
                    "layoutClassName" : "noPadding aDescriptionAction",
                    "layoutStyle" : { },
                    "style" : { },
                    "text" : {
                      "@class" : "Script",
                      "content" : "import { ActionBase } from \"./game/common/actions/actionBase\";\nimport { ActionTemplateBase } from \"./game/common/actions/actionTemplateBase\";\nimport { getTranslation } from \"./tools/translation\";\nconst actionTpl = Context.action as ActionTemplateBase;\nactionTpl.getDescription();",
                      "language" : "TypeScript"
                    }
                  },
                  "type" : "Text"
                }, {
                  "props" : {
                    "className" : "noPadding playActionBtn",
                    "icon" : {
                      "@class" : "Script",
                      "content" : "import { isDefineMapObjectTemplate } from \"./UIfacade/actionFacade\";\nif (isDefineMapObjectTemplate(Context.action.Uid)) {\n\treturn 'crosshairs';\n}\n'play'",
                      "language" : "typescript"
                    },
                    "label" : {
                      "@class" : "Script",
                      "content" : "\"\"",
                      "language" : "TypeScript"
                    },
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "// import { actionClickHandler, canPlanAction, getCurrentActorUid, showModal } from \"./gameInterface/main\";\n// import { startMapAction } from \"./gameMap/main\";\n// import { getActionTemplate, isDefineMapObjectTemplate, isMethaneActionTemplate, planAction } from \"./UIfacade/actionFacade\";\n// \n// const ref = getActionTemplate(Context.action.Uid)!.getTemplateRef();\n// const uid = getCurrentActorUid();\n// \n// if (canPlanAction()) {\n// \tif (isDefineMapObjectTemplate(Context.action.Uid)) {\n// \t\tstartMapAction(Context.action.featureType);\n// \t} else if (isMethaneActionTemplate(Context.action.Uid)){\n// \t\tAPIMethods.runScript(\n//         `Variable.find(gameModel, 'showMethaneModal').setValue(self, true)`,\n//         {});\n// \n// \t} else {\n// \t\tplanAction(ref, uid);\n// \t}\n// } else {\n// \tshowModal()\n// }\n\nimport { actionClickHandler } from \"./gameInterface/main\";\n\nactionClickHandler(Context.action.Uid, Context.action.featureType)",
                        "language" : "TypeScript"
                      }
                    },
                    "style" : { }
                  },
                  "type" : "Button"
                } ],
                "className" : "actionInfo",
                "hideIf" : {
                  "@class" : "Script",
                  "content" : "Variable.find(gameModel, 'currentActionUid').getValue(self) !== Context.action.Uid;",
                  "language" : "typescript"
                },
                "layout" : {
                  "flexDirection" : "row",
                  "justifyContent" : "space-between"
                },
                "layoutClassName" : "noPadding",
                "layoutStyle" : { },
                "name" : "Description&play",
                "style" : { }
              },
              "type" : "FlexList"
            } ],
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "Actions",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "allDisplay-container",
        "exposeAs" : "action",
        "getItemsFn" : {
          "@class" : "Script",
          "content" : "import { getAvailableActions } from \"./UIfacade/actionFacade\";\ngetAvailableActions(Variable.find(gameModel, 'currentActorUid').getValue(self));",
          "language" : "TypeScript"
        },
        "id" : "",
        "itemKey" : "Uid",
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "allDisplay-container",
        "layoutStyle" : {
          "marginTop" : "0px",
          "paddingTop" : "0px"
        },
        "style" : { }
      },
      "type" : "For each"
    } ],
    "layout" : {
      "flexDirection" : "column",
      "justifyContent" : "flex-start"
    },
    "layoutStyle" : {
      "height" : "100%",
      "marginTop" : "0px",
      "overflow" : "auto",
      "paddingTop" : "0px",
      "width" : "100%"
    },
    "style" : { }
  },
  "type" : "FlexList"
}