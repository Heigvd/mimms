{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "emitter-text-header-layout",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getNotificationTime } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\nif(Context.item.pending) {\n  const translation = getTranslation('mainSim-interface', 'msg-now');\n  return translation;\n}\ngetNotificationTime(Context.item.timeStamp);",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "className" : "emitter-text-body-layout",
                "layoutStyle" : { },
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "  if (!Context.item.pending || Context.item.pending && Context.item.recipientId === Context.interfaceState.state.currentActorUid)\n    return`<p>${Context.item.message.replace(/\\n/g, '<br/>')}</p>`;\n  \"...\";",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            } ],
            "conditionnalClassNames" : [ {
              "applyOn" : "Outside",
              "className" : "radio-message-others tri-right left-top",
              "condition" : {
                "@class" : "Script",
                "content" : "Context.item.recipientId != Context.interfaceState.state.currentActorUid;",
                "language" : "typescript"
              }
            }, {
              "applyOn" : "Outside",
              "className" : "radio-message-myself tri-right right-top",
              "condition" : {
                "@class" : "Script",
                "content" : "Context.item.recipientId == Context.interfaceState.state.currentActorUid;",
                "language" : "typescript"
              }
            }, {
              "applyOn" : "Outside",
              "className" : "pending",
              "condition" : {
                "@class" : "Script",
                "content" : "Context.item.pending;",
                "language" : "typescript"
              }
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { ActionType } from \"./game/common/actionType\";\nContext.item.channel != ActionType.ACTORS_RADIO;",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "message",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "messageArea",
        "exposeAs" : "item",
        "getItemsFn" : {
          "@class" : "Script",
          "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { getAllRadioMessages, getOngoingRadioMessagesOnChannelAsRadioMessages } from \"./UIfacade/radioFacade\";\ngetAllRadioMessages().concat(getOngoingRadioMessagesOnChannelAsRadioMessages(ActionType.ACTORS_RADIO));",
          "language" : "TypeScript"
        },
        "itemKey" : "uid",
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "messageArea-container",
        "layoutStyle" : { },
        "name" : "output message",
        "style" : { }
      },
      "type" : "For each"
    }, {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "layoutStyle" : {
                  "width" : "100%"
                },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.channelText.actors = Context.actors;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"actors\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "readOnlyIf" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\n!canPlanAction();",
                  "language" : "typescript"
                },
                "rows" : 2,
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.channelText.actors;",
                  "language" : "TypeScript"
                },
                "style" : {
                  "border" : "none",
                  "resize" : "none",
                  "width" : "100%"
                }
              },
              "type" : "String input"
            }, {
              "props" : {
                "className" : "button-S button-secondaryColor",
                "conditionnalClassNames" : [ {
                  "applyOn" : "Inside",
                  "className" : "disabled",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\nif (canPlanAction()) return false;\n!isPlannedAction(action[0].Uid);",
                    "language" : "typescript"
                  }
                }, {
                  "applyOn" : "Inside",
                  "className" : "abort",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst actions =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\nisPlannedAction(actions[0].Uid);",
                    "language" : "typescript"
                  }
                } ],
                "disableIf" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { isChannelNewActivityDisabled } from \"./UIfacade/radioFacade\";\n  isChannelNewActivityDisabled(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);",
                  "language" : "typescript"
                },
                "label" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { isPlannedAction } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\nconst isPlanned = action && action.length > 0 && isPlannedAction(action[0].Uid)\nisPlanned ? \"Cancel\" : getTranslation(`mainSim-interface`, `send-one-minute`);",
                  "language" : "TypeScript"
                },
                "layoutStyle" : {
                  "bottom" : "5px",
                  "right" : "5px"
                },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { runActionButton } from \"./gameInterface/actionsButtonLogic\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\n\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\nrunActionButton(action[0]);",
                    "language" : "TypeScript"
                  }
                },
                "style" : { }
              },
              "type" : "Button"
            } ],
            "disableIf" : {
              "@class" : "Script",
              "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.ACTORS_RADIO);\nif (canPlanAction()) return false;\n!isPlannedAction(action[0].Uid);",
              "language" : "typescript"
            },
            "layoutStyle" : {
              "width" : "100%"
            },
            "onAbsoluteClick" : { },
            "style" : {
              "width" : "100%"
            }
          },
          "type" : "AbsoluteLayout"
        } ],
        "layout" : { },
        "layoutClassName" : "freeMessageInput-container",
        "layoutStyle" : { },
        "name" : "input message",
        "style" : { }
      },
      "type" : "FlexList"
    } ],
    "className" : "noPadding noMargin",
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : "noPadding noMargin",
    "layoutStyle" : {
      "height" : "100%",
      "width" : "100%"
    },
    "name" : "messagePanel",
    "style" : { }
  },
  "type" : "FlexList"
}