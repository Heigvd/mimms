import { parse } from '../../../tools/WegasHelper';
import { GlobalEventId, SimTime } from '../baseTypes';
import { EventPayload, TimedEventPayload } from './eventTypes';

export type EventId = number;

/**
 * a FullEvent is meant to be broadcasted to all opened games instances
 * it is always generated by a player/trainer action
 */
export interface FullEvent<T extends EventPayload> {
  /** backend defined id */
  id: GlobalEventId;
  /** backend defined timestamp (epoch) */
  timestamp: number;
  /** legacy for real time */
  time: SimTime;
  /** reference to the previous event for chaining consistency */
  previousEventId: number;
  /** event box reference */
  eventBoxId: number;

  payload: T;
}

export function getSendEventServerScript(payload: EventPayload, time?: number, teamId?: number) {
  return `EventManager.postNewEvent(${JSON.stringify(payload)}, ${time}, ${teamId});`;
}

export function sendEvent(
  payload: EventPayload,
  time?: number,
  teamId?: number
): Promise<IManagedResponse> {
  return APIMethods.runScript(getSendEventServerScript(payload, time, teamId), {});
}

export function sendEvents(
  payloads: EventPayload[],
  time?: number,
  teamId?: number
): Promise<IManagedResponse> {
  const script = payloads.map(payload => getSendEventServerScript(payload, time, teamId)).join('');
  return APIMethods.runScript(script, {});
}

export function getAllEvents<P extends EventPayload>(): FullEvent<P>[] {
  const eventsInstance = Variable.find(gameModel, 'newEvents').getInstance(self);
  const rawEvents = eventsInstance.getEntity().events || [];
  return rawEvents.map(parseSingleEvent);
}

export function parseSingleEvent<P extends EventPayload>(rawEv: any): FullEvent<P> {
  const content = parse<{ time: number; payload: P }>(rawEv.payload)!;
  const event: FullEvent<P> = {
    id: rawEv.id,
    time: content.time, // sim provided time (used in pre-tri real time)
    payload: content.payload,
    timestamp: rawEv.timeStamp, // server epoch time
    previousEventId: rawEv.previousEventId,
    eventBoxId: rawEv.parentId,
  };
  return event;
}

/**
 * Legacy compare (sort by real time in pr√©tri)
 * @param a
 * @param b
 * @returns
 */
export function compareEvent(a: FullEvent<EventPayload>, b: FullEvent<EventPayload>): number {
  if (a.time < b.time) {
    return -1;
  } else if (a.time > b.time) {
    return +1;
  } else if (a.timestamp === b.timestamp) {
    return a.id - b.id;
  } else {
    return a.timestamp - b.timestamp;
  }
}

/**
 * Main simulation compare function
 * @param a
 * @param b
 * @returns
 */
export function compareTimedEvents(
  a: FullEvent<TimedEventPayload>,
  b: FullEvent<TimedEventPayload>
): number {
  if (a.timestamp !== b.timestamp) {
    return a.timestamp - b.timestamp;
  }
  return a.id - b.id;
}
