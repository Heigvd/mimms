{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "className" : "modalTitle",
            "layoutStyle" : { },
            "name" : "modalTitle",
            "style" : {
              "width" : "100%"
            },
            "text" : {
              "@class" : "Script",
              "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation(`mainSim-interface`, `casu-transmission`);",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "children" : [ {
                  "props" : {
                    "className" : "rectangleButton",
                    "id" : "",
                    "label" : {
                      "@class" : "Script",
                      "content" : "\"<p>METHANE</p>\"",
                      "language" : "TypeScript"
                    },
                    "layoutClassName" : "rectangleButton-container",
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state);\nnewState.casuMessage.messageType = 'METHANE';\nContext.interfaceState.setState(newState);",
                        "language" : "TypeScript"
                      }
                    },
                    "name" : "methane",
                    "style" : { }
                  },
                  "type" : "Button"
                }, {
                  "props" : {
                    "className" : "rectangleButton",
                    "id" : "",
                    "label" : {
                      "@class" : "Script",
                      "content" : "\"<p>MET</p>\"",
                      "language" : "TypeScript"
                    },
                    "layoutClassName" : "rectangleButton-container",
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state);\nnewState.casuMessage.messageType = 'MET';\nContext.interfaceState.setState(newState);",
                        "language" : "TypeScript"
                      }
                    },
                    "name" : "met",
                    "style" : { }
                  },
                  "type" : "Button"
                }, {
                  "props" : {
                    "className" : "rectangleButton",
                    "id" : "",
                    "label" : {
                      "@class" : "Script",
                      "content" : "\"<p>HANE</p>\"",
                      "language" : "TypeScript"
                    },
                    "layoutClassName" : "rectangleButton-container",
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state);\nnewState.casuMessage.messageType = 'HANE';\nContext.interfaceState.setState(newState);",
                        "language" : "TypeScript"
                      }
                    },
                    "name" : "hane",
                    "style" : { }
                  },
                  "type" : "Button"
                }, {
                  "props" : {
                    "className" : "rectangleButton",
                    "id" : "",
                    "label" : {
                      "@class" : "Script",
                      "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks','request-resources');",
                      "language" : "TypeScript"
                    },
                    "layoutClassName" : "rectangleButton-container",
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : " const newState = Helpers.cloneDeep(Context.interfaceState.state);\n newState.casuMessage.messageType = 'E';\n Context.interfaceState.setState(newState);",
                        "language" : "TypeScript"
                      }
                    },
                    "name" : "demandeRessources",
                    "style" : { }
                  },
                  "type" : "Button"
                } ],
                "className" : "noPadding noMargin",
                "layout" : { },
                "layoutClassName" : "noPadding noMargin",
                "layoutStyle" : {
                  "max-width" : "25vw"
                },
                "name" : "methaneButtons",
                "style" : { }
              },
              "type" : "FlexList"
            }, {
              "props" : {
                "className" : "rectangleButton",
                "id" : "",
                "label" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks','request-hospital-info');",
                  "language" : "TypeScript"
                },
                "layoutClassName" : "rectangleButton-container",
                "layoutStyle" : { },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : " const newState = Helpers.cloneDeep(Context.interfaceState.state);\n newState.casuMessage.messageType = 'R';\n Context.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  }
                },
                "name" : "demandeInfoHopitaux",
                "style" : { }
              },
              "type" : "Button"
            } ],
            "className" : "noPadding",
            "layout" : {
              "alignItems" : "flex-start",
              "flexDirection" : "column"
            },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : {
              "max-width" : "25vw"
            },
            "name" : "buttons",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterM",
                "style" : {
                  "padding" : "0px"
                },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>M<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.major = Context.major;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"major\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.major;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n/*selected !== \"METHANE\" && selected !== \"MET\";*/\n!selected.startsWith('MET');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterM",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterE",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>E<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.exact = Context.exact;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"exact\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.exact;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.startsWith('MET');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterE",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterT",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>T<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.incidentType = Context.incidentType;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"incidentType\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.incidentType;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.startsWith('MET');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterT",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterH",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>H<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.hazards = Context.hazards;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"hazards\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.hazards;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.endsWith('HANE');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterH",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterA",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>A<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.access = Context.access;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"access\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.access;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.endsWith('HANE');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterA",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "methane-letter",
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterN",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>N<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "layoutClassName" : "methane-letter-input",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.casuMessage.victims = Context.victims;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"victims\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-interface', 'your-text');",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.casuMessage.victims;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "String input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.endsWith('HANE');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterN",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "layoutClassName" : "methane-letter-container",
                "layoutStyle" : { },
                "name" : "letterE",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>E<br></p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "children" : [ {
                  "props" : {
                    "children" : [ {
                      "props" : {
                        "label" : {
                          "@class" : "Script",
                          "content" : "\"0\"",
                          "language" : "TypeScript"
                        },
                        "layoutStyle" : { },
                        "onCancel" : { },
                        "onVariableChange" : {
                          "client" : {
                            "@class" : "Script",
                            "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.resources.requestedResources[Context.item.type] = Context.value;\nContext.interfaceState.setState(newState);",
                            "language" : "TypeScript"
                          },
                          "exposeVariableAs" : {
                            "@class" : "Script",
                            "content" : "\"value\"",
                            "language" : "TypeScript"
                          }
                        },
                        "placeholder" : {
                          "@class" : "Script",
                          "content" : "\"0\"",
                          "language" : "TypeScript"
                        },
                        "script" : {
                          "@class" : "Script",
                          "content" : "Context.interfaceState.state.resources.requestedResources[Context.item.type] || '';",
                          "language" : "TypeScript"
                        },
                        "style" : {
                          "minWidth" : "0px",
                          "width" : "30px"
                        }
                      },
                      "type" : "Number input"
                    }, {
                      "props" : {
                        "className" : "methane-input-label",
                        "layoutStyle" : {
                          "paddingBottom" : "0px",
                          "paddingTop" : "0px",
                          "width" : "84px"
                        },
                        "onCancel" : { },
                        "onVariableChange" : { },
                        "style" : { },
                        "text" : {
                          "@class" : "Script",
                          "content" : "// TODO transalations\nContext.item.type;",
                          "language" : "TypeScript"
                        }
                      },
                      "type" : "Text"
                    } ],
                    "layout" : { },
                    "layoutStyle" : {
                      "width" : "120px"
                    },
                    "style" : {
                      "flexDirection" : "row"
                    }
                  },
                  "type" : "FlexList"
                } ],
                "exposeAs" : "item",
                "getItemsFn" : {
                  "@class" : "Script",
                  "content" : "import { ResourceContainerTypeArray } from \"./game/common/resources/resourceContainer\";\nResourceContainerTypeArray.map(t => {return {type : t}});",
                  "language" : "TypeScript"
                },
                "itemKey" : "type",
                "layout" : { },
                "layoutStyle" : {
                  "marginTop" : "7px"
                },
                "style" : {
                  "flexWrap" : "wrap",
                  "maxWidth" : "700px"
                }
              },
              "type" : "For each"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.endsWith('E');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterE",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "layoutClassName" : "",
                "layoutStyle" : { },
                "name" : "letterR",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-actions-tasks', 'get-hospital-information-desc')",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { HospitalProximity } from \"./game/common/evacuation/hospitalType\";\n// Filter out corresponding numeric keys\nconst selection = Object.keys(HospitalProximity).filter(k => isNaN(parseInt(k))).map((key) => ({\n\tlabel: key,\n\tvalue: HospitalProximity[key],\n}));\nselection;",
                  "language" : "typescript"
                },
                "id" : "",
                "layoutStyle" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.getHospitalInfoChosenProximity = Context.getHospitalInfoChosenProximity;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"getHospitalInfoChosenProximity\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.getHospitalInfoChosenProximity || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "const selected = Context.interfaceState.state.casuMessage.messageType;\n!selected.endsWith('R');",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutClassName" : "noPadding noMargin",
            "layoutStyle" : { },
            "name" : "LetterR",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "className" : "button-secondaryColor button-S",
                "conditionnalClassNames" : [ {
                  "applyOn" : "Inside",
                  "className" : "abort",
                  "condition" : {
                    "@class" : "Script",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst actions =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.CASU_RADIO);\nisPlannedAction(actions[0].Uid);",
                    "language" : "typescript"
                  }
                } ],
                "disableIf" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { canPlanAction, isPlannedAction } from \"./gameInterface/main\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.CASU_RADIO);\nif (canPlanAction()) return false;\n!isPlannedAction(action[0].Uid);",
                  "language" : "typescript"
                },
                "label" : {
                  "@class" : "Script",
                  "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { isPlannedAction } from \"./gameInterface/main\";\nimport { getTranslation } from \"./tools/translation\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.CASU_RADIO);\nconst isPlanned = isPlannedAction(action[0].Uid)\nisPlanned ? \"Cancel\" : getTranslation(`mainSim-interface`, `send-one-minute`);",
                  "language" : "TypeScript"
                },
                "layoutStyle" : { },
                "localScriptEval" : {
                  "script" : {
                    "@class" : "ClientScript",
                    "content" : "import { ActionType } from \"./game/common/actionType\";\nimport { runActionButton } from \"./gameInterface/actionsButtonLogic\";\nimport { getAvailableActions } from \"./UIfacade/actionFacade\";\n\nconst action =  getAvailableActions(Context.interfaceState.state.currentActorUid, ActionType.CASU_RADIO);\nrunActionButton(action[0]);",
                    "language" : "TypeScript"
                  }
                },
                "name" : "send",
                "style" : { }
              },
              "type" : "Button"
            } ],
            "className" : "",
            "hideIf" : {
              "@class" : "Script",
              "content" : "Context.interfaceState.state.casuMessage.messageType == '';",
              "language" : "typescript"
            },
            "layout" : {
              "justifyContent" : "flex-end"
            },
            "layoutClassName" : "",
            "layoutStyle" : { },
            "name" : "button send",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "scrollableCasuTransmission",
        "layout" : {
          "flexDirection" : "column",
          "justifyContent" : "flex-start"
        },
        "layoutStyle" : { },
        "name" : "",
        "style" : { }
      },
      "type" : "FlexList"
    } ],
    "className" : "noPadding noMargin ",
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : " noPadding noMargin casuTransmission-container",
    "layoutStyle" : { },
    "name" : "casuMessageInput",
    "style" : { }
  },
  "type" : "FlexList"
}