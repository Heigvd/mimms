{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "true;",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "  JSON.stringify(Context.item);",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "choices" : {
              "@class" : "Script",
              "content" : "import { getConditionSelection } from \"./edition/UIfacade/triggerConfigFacade\";\n  getConditionSelection();",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "type",
            "onVariableChange" : {
              "client" : {
                "@class" : "Script",
                "content" : "import { fromUItypeToDataType, updateConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\nconst dataType = fromUItypeToDataType(Context.value);\n\nupdateConditionType(Context.item.uid, dataType);",
                "language" : "TypeScript"
              },
              "exposeVariableAs" : {
                "@class" : "Script",
                "content" : "\"value\"",
                "language" : "TypeScript"
              }
            },
            "placeholder" : {
              "@class" : "Script",
              "content" : "\"Select type\"",
              "language" : "TypeScript"
            },
            "script" : {
              "@class" : "Script",
              "content" : "  Context.item.type === 'empty' ? '' : Context.item.type;",
              "language" : "TypeScript"
            },
            "style" : { }
          },
          "type" : "Select input"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getTimeOperatorChoices } from \"./edition/UIfacade/triggerConfigFacade\";\n  getTimeOperatorChoices();",
                  "language" : "typescript"
                },
                "layoutStyle" : { },
                "name" : "< | = | >",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { operator: Context.value });",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"value\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "  Context.item.operator;",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            }, {
              "props" : {
                "layoutStyle" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { timeSeconds: Context.value * 60 });",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"value\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "  Math.round(Context.item.timeSeconds / 60);",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Number input"
            }, {
              "props" : {
                "layoutStyle" : { },
                "name" : "min",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "\"<p>min</p>\"",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n  !isOfConditionType(Context.item, 'time');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutStyle" : { },
            "name" : "time",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getActivableSelection } from \"./edition/UIfacade/activableFacade\";\n  getActivableSelection('actionTemplate');",
                  "language" : "typescript"
                },
                "layoutStyle" : { },
                "name" : "action",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { actionRef: Context.value });",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"value\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "\"Select action\"",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "  /* Note : do not use ?? '', only || '' works */\n  Context.item.actionRef || '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            }, {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getActivableSelection } from \"./edition/UIfacade/activableFacade\";\n  [\n    ...getActivableSelection('choice', Context.item.choiceRef),\n    { label: 'Any choice', value: 'all' }\n  ];",
                  "language" : "typescript"
                },
                "hideIf" : {
                  "@class" : "Script",
                  "content" : "!Context.item.actionRef;",
                  "language" : "typescript"
                },
                "layoutStyle" : { },
                "name" : "choice",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "/*updateItem<FlatCondition>(Context.item.uid, { actionRef: Context.value });*/",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"value\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "\"Select choice\"",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "  /* Note : do not use ?? '', only || '' works */\n  Context.item.choiceRef || 'all';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            }, {
              "props" : {
                "children" : [ {
                  "props" : {
                    "conditionnalClassNames" : [ {
                      "applyOn" : "Inside",
                      "className" : "warningText /* TO BE CHANGED OF COURSE */",
                      "condition" : {
                        "@class" : "Script",
                        "content" : "Context.item.status === Context.status.value;",
                        "language" : "typescript"
                      }
                    } ],
                    "label" : {
                      "@class" : "Script",
                      "content" : "  Context.status.label;",
                      "language" : "TypeScript"
                    },
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { status: Context.status.value });",
                        "language" : "TypeScript"
                      }
                    },
                    "style" : { }
                  },
                  "type" : "Button"
                } ],
                "exposeAs" : "status",
                "getItemsFn" : {
                  "@class" : "Script",
                  "content" : "import { getChoiceActionStatusSelection } from \"./edition/UIfacade/triggerConfigFacade\";\n  getChoiceActionStatusSelection();",
                  "language" : "TypeScript"
                },
                "itemKey" : "value",
                "layout" : { },
                "layoutStyle" : { },
                "name" : "status",
                "style" : { }
              },
              "type" : "For each"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n  !isOfConditionType(Context.item, 'action')",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "action, choices",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n  !isOfConditionType(Context.item, 'choice');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutStyle" : { },
            "name" : "choice",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ {
              "props" : {
                "choices" : {
                  "@class" : "Script",
                  "content" : "import { getActivableSelection } from \"./edition/UIfacade/activableFacade\";\nimport { getSelected } from \"./edition/UIfacade/genericConfigFacade\";\n  getActivableSelection('trigger')\n    .filter(item => item.value !== getSelected('trigger')?.uid);",
                  "language" : "typescript"
                },
                "layoutStyle" : { },
                "name" : "trigger",
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { activableRef: Context.value });",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"value\"",
                    "language" : "TypeScript"
                  }
                },
                "placeholder" : {
                  "@class" : "Script",
                  "content" : "\"Select trigger\"",
                  "language" : "TypeScript"
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "  Context.item.activableRef ?? '';",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Select input"
            }, {
              "props" : {
                "children" : [ {
                  "props" : {
                    "conditionnalClassNames" : [ {
                      "applyOn" : "Inside",
                      "className" : "warningText /* TO BE CHANGED OF COURSE */",
                      "condition" : {
                        "@class" : "Script",
                        "content" : "Context.item.status === Context.status.value;",
                        "language" : "typescript"
                      }
                    } ],
                    "label" : {
                      "@class" : "Script",
                      "content" : "Context.status.label;",
                      "language" : "TypeScript"
                    },
                    "layoutStyle" : { },
                    "localScriptEval" : {
                      "script" : {
                        "@class" : "ClientScript",
                        "content" : "import { FlatCondition } from \"./edition/typeDefinitions/conditionDefinition\";\nimport { updateItem } from \"./edition/UIfacade/triggerConfigFacade\";\n\nupdateItem<FlatCondition>(Context.item.uid, { status: Context.status.value });",
                        "language" : "TypeScript"
                      }
                    },
                    "style" : { }
                  },
                  "type" : "Button"
                } ],
                "exposeAs" : "status",
                "getItemsFn" : {
                  "@class" : "Script",
                  "content" : "import { getActiveInactiveStatusChoices } from \"./edition/UIfacade/triggerConfigFacade\";\ngetActiveInactiveStatusChoices();",
                  "language" : "TypeScript"
                },
                "itemKey" : "value",
                "layout" : { },
                "layoutStyle" : { },
                "name" : "status",
                "style" : { }
              },
              "type" : "For each"
            } ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n  !isOfConditionType(Context.item, 'trigger');",
              "language" : "typescript"
            },
            "layout" : {
              "flexDirection" : "column"
            },
            "layoutStyle" : { },
            "name" : "trigger",
            "style" : { }
          },
          "type" : "FlexList"
        }, {
          "props" : {
            "children" : [ ],
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n!isOfConditionType(Context.item, 'mapEntity');",
              "language" : "typescript"
            },
            "layout" : { },
            "layoutStyle" : { },
            "name" : "mapEntity",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "hideIf" : {
          "@class" : "Script",
          "content" : "import { isSelected } from \"./edition/UIfacade/genericConfigFacade\";\n  !isSelected(Context.item.superType, Context.item.uid);",
          "language" : "typescript"
        },
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "noPadding",
        "layoutStyle" : { },
        "name" : "open",
        "style" : { }
      },
      "type" : "FlexList"
    }, {
      "props" : {
        "children" : [ {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n  !isOfConditionType(Context.item, 'time');",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "time",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "  Context.item.type + ' ' + Context.item.operator + ' ' + Math.round(Context.item.timeSeconds / 60) + '  min';",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "Context.item.type !== 'action';",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "action",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "import { getActivableTag } from \"./edition/UIfacade/activableFacade\";\n  Context.item.type + ' ' + getActivableTag('actionTemplate', Context.item.actionRef);",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "Context.item.type !== 'choice';",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "choice",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "import { getActivableTag } from \"./edition/UIfacade/activableFacade\";\n  Context.item.type + ' ' + getActivableTag('choice', Context.item.choiceRef);",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n!isOfConditionType(Context.item, 'trigger');",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "trigger",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "import { getActivableTag } from \"./edition/UIfacade/activableFacade\";\n  Context.item.type + ' ' + getActivableTag('trigger', Context.item.activableRef) + (Context.item.status === 'active' ? ' is active' : ' is inactive');",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "hideIf" : {
              "@class" : "Script",
              "content" : "import { isOfConditionType } from \"./edition/UIfacade/triggerConfigFacade\";\n!isOfConditionType(Context.item, 'mapEntity');",
              "language" : "typescript"
            },
            "layoutStyle" : { },
            "name" : "mapEntity",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "import { getActivableTag } from \"./edition/UIfacade/activableFacade\";\nContext.item.type +  ' ' + getActivableTag('mapEntity', Context.item.activableRef);",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        } ],
        "hideIf" : {
          "@class" : "Script",
          "content" : "import { isSelected } from \"./edition/UIfacade/genericConfigFacade\";\n  isSelected(Context.item.superType, Context.item.uid);",
          "language" : "typescript"
        },
        "layout" : {
          "flexDirection" : "column"
        },
        "layoutClassName" : "noPadding",
        "layoutStyle" : { },
        "name" : "closed",
        "style" : { }
      },
      "type" : "FlexList"
    } ],
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : "noPadding",
    "layoutStyle" : {
      "height" : "100%",
      "overflow" : "auto",
      "width" : "100%"
    },
    "style" : { }
  },
  "type" : "FlexList"
}