{
  "props" : {
    "children" : [ {
      "props" : {
        "children" : [ {
          "props" : {
            "layoutClassName" : "",
            "layoutStyle" : { },
            "name" : "send to",
            "style" : { },
            "text" : {
              "@class" : "Script",
              "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-resources', 'sendTo');",
              "language" : "TypeScript"
            }
          },
          "type" : "Text"
        }, {
          "props" : {
            "choices" : {
              "@class" : "Script",
              "content" : "import { Actor } from \"./game/common/actors/actor\";\nimport { getActor, getAllActors } from \"./UIfacade/actorFacade\";\nimport { getAvailableLocationsOnMapNameReplacedByActorIfAvailable } from \"./UIfacade/locationFacade\";\n//return getAllActors().filter(a => a !== getActor(Context.interfaceState.state.currentActorUid)).map((actor: Actor) => {return {label: actor.ShortName, value: \"\" + actor.Uid}});\ngetAvailableLocationsOnMapNameReplacedByActorIfAvailable();",
              "language" : "typescript"
            },
            "disableIf" : {
              "@class" : "Script",
              "content" : "import { getAllActors } from \"./UIfacade/actorFacade\";\ngetAllActors().length <= 1",
              "language" : "typescript"
            },
            "layoutClassName" : "actorChoiceInAction",
            "layoutStyle" : { },
            "name" : "selected actor",
            "onVariableChange" : {
              "client" : {
                "@class" : "Script",
                "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.resources.sendResources.selectedActorId = Context.sendResourcesSelectedActorId;\nContext.interfaceState.setState(newState);",
                "language" : "TypeScript"
              },
              "exposeVariableAs" : {
                "@class" : "Script",
                "content" : "\"sendResourcesSelectedActorId\"",
                "language" : "TypeScript"
              }
            },
            "script" : {
              "@class" : "Script",
              "content" : "import { getOtherValidActor } from \"./UIfacade/actorFacade\";\nconst otherActor = getOtherValidActor(Context) + '';\nContext.interfaceState.state.resources.sendResources.selectedActorId = otherActor;\notherActor;",
              "language" : "TypeScript"
            },
            "style" : { }
          },
          "type" : "Select input"
        } ],
        "className" : "",
        "layout" : {
          "alignContent" : "stretch",
          "alignItems" : "center"
        },
        "layoutClassName" : "noPadding",
        "layoutStyle" : { },
        "name" : "receiver actor",
        "style" : { }
      },
      "type" : "FlexList"
    }, {
      "props" : {
        "children" : [ {
          "props" : {
            "children" : [ {
              "props" : {
                "icon" : "user-nurse",
                "layoutClassName" : "actionResourceIcon-container",
                "layoutStyle" : { },
                "name" : "resource icon",
                "style" : { }
              },
              "type" : "Icon"
            }, {
              "props" : {
                "layoutClassName" : "chosenNumber-container",
                "layoutStyle" : { },
                "onCancel" : { },
                "onVariableChange" : {
                  "client" : {
                    "@class" : "Script",
                    "content" : "const newState = Helpers.cloneDeep(Context.interfaceState.state)\nnewState.resources.sendResources[Context.resourceType.enum] = Context.sendResourcesNbForType;\nContext.interfaceState.setState(newState);",
                    "language" : "TypeScript"
                  },
                  "exposeVariableAs" : {
                    "@class" : "Script",
                    "content" : "\"sendResourcesNbForType\"",
                    "language" : "TypeScript"
                  }
                },
                "script" : {
                  "@class" : "Script",
                  "content" : "Context.interfaceState.state.resources.sendResources[Context.resourceType.enum];",
                  "language" : "TypeScript"
                },
                "style" : { }
              },
              "type" : "Number input"
            }, {
              "props" : {
                "layoutClassName" : "resourceTypeName-container",
                "layoutStyle" : { },
                "name" : "resource type name",
                "style" : { },
                "text" : {
                  "@class" : "Script",
                  "content" : "import { getTranslation } from \"./tools/translation\";\ngetTranslation('mainSim-resources', '' + Context.resourceType.enum + '-short');",
                  "language" : "TypeScript"
                }
              },
              "type" : "Text"
            } ],
            "className" : "oneActionResource noPadding",
            "layout" : {
              "alignItems" : "center",
              "flexDirection" : "column"
            },
            "layoutClassName" : "noPadding",
            "layoutStyle" : { },
            "name" : "one resource",
            "style" : { }
          },
          "type" : "FlexList"
        } ],
        "className" : "actionResources",
        "exposeAs" : "resourceType",
        "getItemsFn" : {
          "@class" : "Script",
          "content" : "import { getHumanResourceTypes } from \"./UIfacade/resourceTaskFacade\";\ngetHumanResourceTypes().map(type => {return {enum: type}});",
          "language" : "TypeScript"
        },
        "itemKey" : "enum",
        "layout" : { },
        "layoutClassName" : "noPadding",
        "layoutStyle" : { },
        "style" : { }
      },
      "type" : "For each"
    } ],
    "className" : "resourcesPanel",
    "layout" : {
      "flexDirection" : "column"
    },
    "layoutClassName" : "resourcesPanel-container noPadding",
    "layoutStyle" : { },
    "name" : "resources to send",
    "style" : { }
  },
  "type" : "FlexList"
}